import map from "lodash/map.js";
import random from "lodash/random.js";
import { describe, expect, it } from "vitest";

import { adder } from "../../src/number/adder.js";

describe("add", () => {
  it.each([
    [["2", "2"], "4"],
    [["123", "777"], "900"],
    [["123.456", "777.543", "0.001"], "901"],
    [["123", "999999", "0.3324324"], "1000122.3324324"],
    [["2", "-2"], "0"],
    [["123", "-777", "0"], "-654"],
    [["-123", "777", "0"], "654"],
    [["9999999999999999999", "9999999999999999999"], "19999999999999999998"],
    [["0.3", "0.6"], "0.9"],
    [["0.3", "0.6"], "0.9"],
    [["5"], "5"],
    [[], "0"],
    [["123456789012345678901234567890", "987654321098765432109876543210"], "1111111110111111111011111111100"],
    [["1000", "-999", "-1"], "0"],
    [["0.000000001", "0.000000002"], "0.000000003"],
    [["0", "0", "0", "0"], "0"],
    [["-0.1", "-0.2"], "-0.3"],
    [["123", "45.67"], "168.67"],
    [["0.0001", "0.0002", "0.0003"], "0.0006"],
    [["9999999999", "0.000000001"], "9999999999.000000001"],
    [[BigInt(5).toString(), BigInt("9999999999999999999").toString()], "10000000000000000004"],
    [[Number.MAX_SAFE_INTEGER.toString(), Number.MAX_SAFE_INTEGER.toString()], "18014398509481982"],
    [[
      "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",
      "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",
    ], "6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238982596673467248813132861720427898927904494743814043597218874055410784343525863535047693496369353388102640011362542905271216555715426855155792183472743574429368818024499068602930991707421015845593785178470840399122242580439217280688363196272595495426199210374144226999999967459560999021194634656321926371900489189106938166052850446165066893700705238623763420200062756775057731750664167628412343553382946071965069808575109374623191257277647075751875039155637155610643424536132260038557532223918184328403978761905144021309717265578"],
  ])("should add %s to get %s", (numbers, result) => {
    expect(adder(numbers)).toEqual(result);
  });

  it("should not crash", () => {
    const numbers = map(Array.from({ length: 100_000 }), () => {
      return String(random(1, Number.MAX_SAFE_INTEGER));
    });

    const start = performance.now();
    const result = adder(numbers);
    const result2 = adder([result, ...numbers]);
    adder([result2, ...numbers]);
    const end = performance.now() - start;

    expect(result).toBeTypeOf("string");
    expect(end).toBeTypeOf("number");
  });
});
